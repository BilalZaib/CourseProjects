Microsoft (R) Macro Assembler Version 6.15.8803		    12/17/15 22:29:53
Flappy Bird Game					     Page 1 - 1


				TITLE Flappy Bird Game

				; Program Description: Flappy Bird Game
				; Author: Bilal Zaib
				; Creation Date: 12/5/2015

				;--------------------------------------------------------------------------------------------------

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE Macros.inc
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDELIB User32.lib
				INCLUDE     GraphWin.inc
			      C .NOLIST
			      C .LIST
			      C 
				Include file.asm
			      C TITLE Flappy Bird Game
			      C 
			      C ; Program Description: Flappy Bird Game
			      C ; Author: Bilal Zaib
			      C ; Creation Date: 12/5/2015
			      C 
			      C ;--------------------------------------------------------------------------------------------------
			      C 
			      C ;INCLUDE Irvine32.inc
			      C ;INCLUDE Macros.inc
			      C ;INCLUDELIB User32.lib
			      C ;INCLUDE     GraphWin.inc
			      C Include hlpMuse.asm
			      C TITLE Flappy Bird Game
			      C 
			      C ; Program Description: Flappy Bird Game
			      C ; Author: Bilal Zaib
			      C ; Creation Date: 12/5/2015
			      C 
			      C ;--------------------------------------------------------------------------------------------------
			      C 
			      C INCLUDE tringl.asm
			      C TITLE Flappy Bird Game
			      C 
			      C ; Program Description: Flappy Ball Game
			      C ; Author: Bilal Zaib
			      C ; Creation Date: 12/5/2015
			      C 
			      C ;--------------------------------------------------------------------------------------------------
 00000000		      C .data 
 00000000		      C .code
			      C 
 00000000		      C BILAL PROC, x:WORD, y:WORD
			      C LOCAL xyPos:COORD
			      C INVOKE GetStdHandle,STD_OUTPUT_HANDLE
 0000000D  66| 8B 55 08	      C 	mov dx, x
 00000011  66| 89 55 FC	      C 	mov xyPos.x, dx
 00000015  66| 8B 55 0C	      C 	mov dx, y
 00000019  66| 89 55 FE	      C 	mov xyPos.y, dx
			      C 	INVOKE SetConsoleCursorPosition, eax, xyPos
			      C 	ret
 0000002A		      C BILAL ENDP
			      C 
 0000002A		      C PAGE2 PROC
 0000002A  B8 00000006	      C 	mov eax,06h
 0000002F  E8 00000000 E      C 	call settextcolor
 00000034  B0 B2	      C 	mov al,178
 00000036  B2 17	      C 	mov dl,23
 00000038  B9 0000001F	      C 	mov ecx,31
 0000003D		      C 	l1:
 0000003D  B6 06	      C 		mov dh,6
 0000003F  E8 00000000 E      C 		call gotoxy
 00000044  E8 00000000 E      C 		call writechar
 00000049  52		      C 		push edx
 0000004A  51		      C 		push ecx
 0000004B  50		      C 		push eax
			      C 		INVOKE Sleep,10
 00000053  58		      C 		pop eax
 00000054  59		      C 		pop ecx
 00000055  5A		      C 		pop edx
 00000056  FE C2	      C 		inc dl
 00000058  E2 E3	      C 	LOOP l1
 0000005A  B6 06	      C 	mov dh,6
 0000005C  B9 00000012	      C 	mov ecx,18
 00000061		      C 	l2:
 00000061  B2 36	      C 		mov dl,54
 00000063  E8 00000000 E      C 		call gotoxy
 00000068  E8 00000000 E      C 		call writechar
 0000006D  52		      C 		push edx
 0000006E  51		      C 		push ecx
 0000006F  50		      C 		push eax
			      C 		INVOKE Sleep,10
 00000077  58		      C 		pop eax
 00000078  59		      C 		pop ecx
 00000079  5A		      C 		pop edx
 0000007A  FE C6	      C 		inc dh
 0000007C  E2 E3	      C 	LOOP l2
 0000007E  B2 37	      C 	mov dl,55
 00000080  B9 0000001F	      C 	mov ecx,31
 00000085		      C 	l3:
 00000085  B6 16	      C 		mov dh,22
 00000087  E8 00000000 E      C 		call gotoxy
 0000008C  E8 00000000 E      C 		call writechar
 00000091  52		      C 		push edx
 00000092  51		      C 		push ecx
 00000093  50		      C 		push eax
			      C 		INVOKE Sleep,10
 0000009B  58		      C 		pop eax
 0000009C  59		      C 		pop ecx
 0000009D  5A		      C 		pop edx
 0000009E  FE CA	      C 		dec dl
 000000A0  E2 E3	      C 	LOOP l3
 000000A2  B6 16	      C 	mov dh,22
 000000A4  B9 00000012	      C 	mov ecx,18
 000000A9		      C 	l4:
 000000A9  B2 18	      C 		mov dl,24
 000000AB  E8 00000000 E      C 		call gotoxy
 000000B0  E8 00000000 E      C 		call writechar
 000000B5  52		      C 		push edx
 000000B6  51		      C 		push ecx
 000000B7  50		      C 		push eax
			      C 		INVOKE Sleep,10
 000000BF  58		      C 		pop eax
 000000C0  59		      C 		pop ecx
 000000C1  5A		      C 		pop edx
 000000C2  FE CE	      C 		dec dh
 000000C4  E2 E3	      C 	LOOP l4
			      C 
 000000C6  B6 04	      C 	mov dh,4
 000000C8  B2 1C	      C 	mov dl,28
 000000CA  E8 00000000 E      C 	call gotoxy
 000000CF  B8 0000000C	      C 	mov eax,0Ch
 000000D4  E8 00000000 E      C 	call settextcolor
			      C 	mwrite"WELCOME TO FLAPPY GAME"
 00000000		     1C 	.data				
 00000000 57 45 4C 43 4F     1C 	??0000 BYTE "WELCOME TO FLAPPY GAME",0		
	   4D 45 20 54 4F
	   20 46 4C 41 50
	   50 59 20 47 41
	   4D 45 00
 000000D9		     1C 	.code
 000000D9  52		     1C 	push edx
 000000DA  BA 00000000 R     1C 	mov  edx,OFFSET ??0000
 000000DF  E8 00000000 E     1C 	call Writestring
 000000E4  5A		     1C 	pop  edx
			      C 	
 000000E5  B8 000000F4	      C 	mov eax,0F4h
 000000EA  E8 00000000 E      C 	call settextcolor
			      C 	
 000000EF  B6 0A	      C 	mov dh,10
 000000F1  B2 1E	      C 	mov dl,30
 000000F3  E8 00000000 E      C 	call gotoxy
			      C 	mwrite"|                |"
 00000017		     1C 	.data				
 00000017 7C 20 20 20 20     1C 	??0001 BYTE "|                |",0		
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 7C 00
 000000F8		     1C 	.code
 000000F8  52		     1C 	push edx
 000000F9  BA 00000017 R     1C 	mov  edx,OFFSET ??0001
 000000FE  E8 00000000 E     1C 	call Writestring
 00000103  5A		     1C 	pop  edx
 00000104  B6 0B	      C 	mov dh,11
 00000106  B2 1E	      C 	mov dl,30
 00000108  E8 00000000 E      C 	call gotoxy
			      C 	mwrite"|                |"
 0000002A		     1C 	.data				
 0000002A 7C 20 20 20 20     1C 	??0002 BYTE "|                |",0		
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 7C 00
 0000010D		     1C 	.code
 0000010D  52		     1C 	push edx
 0000010E  BA 0000002A R     1C 	mov  edx,OFFSET ??0002
 00000113  E8 00000000 E     1C 	call Writestring
 00000118  5A		     1C 	pop  edx
 00000119  B6 0C	      C 	mov dh,12
 0000011B  B2 1E	      C 	mov dl,30
 0000011D  E8 00000000 E      C 	call gotoxy
			      C 	mwrite"|                |"
 0000003D		     1C 	.data				
 0000003D 7C 20 20 20 20     1C 	??0003 BYTE "|                |",0		
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 7C 00
 00000122		     1C 	.code
 00000122  52		     1C 	push edx
 00000123  BA 0000003D R     1C 	mov  edx,OFFSET ??0003
 00000128  E8 00000000 E     1C 	call Writestring
 0000012D  5A		     1C 	pop  edx
			      C 	
 0000012E  B6 11	      C 	mov dh,17
 00000130  B2 21	      C 	mov dl,33
 00000132  E8 00000000 E      C 	call gotoxy
			      C 	mwrite"|          |"
 00000050		     1C 	.data				
 00000050 7C 20 20 20 20     1C 	??0004 BYTE "|          |",0		
	   20 20 20 20 20
	   20 7C 00
 00000137		     1C 	.code
 00000137  52		     1C 	push edx
 00000138  BA 00000050 R     1C 	mov  edx,OFFSET ??0004
 0000013D  E8 00000000 E     1C 	call Writestring
 00000142  5A		     1C 	pop  edx
 00000143  B6 12	      C 	mov dh,18
 00000145  B2 21	      C 	mov dl,33
 00000147  E8 00000000 E      C 	call gotoxy
			      C 	mwrite"|          |"
 0000005D		     1C 	.data				
 0000005D 7C 20 20 20 20     1C 	??0005 BYTE "|          |",0		
	   20 20 20 20 20
	   20 7C 00
 0000014C		     1C 	.code
 0000014C  52		     1C 	push edx
 0000014D  BA 0000005D R     1C 	mov  edx,OFFSET ??0005
 00000152  E8 00000000 E     1C 	call Writestring
 00000157  5A		     1C 	pop  edx
 00000158  B6 13	      C 	mov dh,19
 0000015A  B2 21	      C 	mov dl,33
 0000015C  E8 00000000 E      C 	call gotoxy
			      C 	mwrite"|          |"
 0000006A		     1C 	.data				
 0000006A 7C 20 20 20 20     1C 	??0006 BYTE "|          |",0		
	   20 20 20 20 20
	   20 7C 00
 00000161		     1C 	.code
 00000161  52		     1C 	push edx
 00000162  BA 0000006A R     1C 	mov  edx,OFFSET ??0006
 00000167  E8 00000000 E     1C 	call Writestring
 0000016C  5A		     1C 	pop  edx
			      C 	
 0000016D  B2 1E	      C 	mov dl,30
 0000016F  B9 00000012	      C 	mov ecx,18
 00000174  B0 2D	      C 	mov al,'-'
 00000176		      C 	L:
 00000176  B6 09	      C 		mov dh,9
 00000178  E8 00000000 E      C 		call gotoxy
 0000017D  E8 00000000 E      C 		call writechar
 00000182  B6 0D	      C 		mov dh,13
 00000184  E8 00000000 E      C 		call gotoxy
 00000189  E8 00000000 E      C 		call writechar
			      C 		.if dl>32 && dl<45
 00000198  B6 10	      C 		mov dh,16
 0000019A  E8 00000000 E      C 		call gotoxy
 0000019F  E8 00000000 E      C 		call writechar
 000001A4  B6 14	      C 		mov dh,20
 000001A6  E8 00000000 E      C 		call gotoxy
 000001AB  E8 00000000 E      C 		call writechar
			      C 		.endif
 000001B0  FE C2	      C 	INC dl
 000001B2  E2 C2	      C 	LOOP L
 000001B4  B6 0B	      C 	mov dh,11
 000001B6  B2 24	      C 	mov dl,36
 000001B8  E8 00000000 E      C 	call gotoxy
 000001BD  B8 000000F9	      C 	mov eax,0F9h
 000001C2  E8 00000000 E      C 	call settextcolor
			      C 	mwrite" PLAY "
 00000077		     1C 	.data				
 00000077 20 50 4C 41 59     1C 	??0007 BYTE " PLAY ",0		
	   20 00
 000001C7		     1C 	.code
 000001C7  52		     1C 	push edx
 000001C8  BA 00000077 R     1C 	mov  edx,OFFSET ??0007
 000001CD  E8 00000000 E     1C 	call Writestring
 000001D2  5A		     1C 	pop  edx
			      C 
 000001D3  B6 12	      C 	mov dh,18
 000001D5  B2 24	      C 	mov dl,36
 000001D7  E8 00000000 E      C 	call gotoxy
 000001DC  B8 000000F9	      C 	mov eax,0F9h
 000001E1  E8 00000000 E      C 	call settextcolor
			      C 	mwrite" QUIT "
 0000007E		     1C 	.data				
 0000007E 20 51 55 49 54     1C 	??0008 BYTE " QUIT ",0		
	   20 00
 000001E6		     1C 	.code
 000001E6  52		     1C 	push edx
 000001E7  BA 0000007E R     1C 	mov  edx,OFFSET ??0008
 000001EC  E8 00000000 E     1C 	call Writestring
 000001F1  5A		     1C 	pop  edx
			      C 	
 000001F2  C3		      C ret
 000001F3		      C PAGE2 ENDP
			      C 
			      C 
 = 0000001B		      C VK_ESCAPE		EQU		00000001bh
 = 00000001		      C VK_LBUTTON		EQU		000000001h
 = 00000002		      C VK_RBUTTON		EQU		000000002h
			      C 
			      C GetCursorPos PROTO, lpPoint:DWORD
			      C ScreenToClient PROTO, hWnd:DWORD, lpPoint:DWORD
			      C GetConsoleWindow            PROTO
			      C GetKeyState                 PROTO :DWORD
			      C 
 00000085		      C .data
 00000085 00000000	      C     cursorPos POINT <?,?>
	   00000000
 0000008D 00000000	      C     hwndConsole DWORD ?
			      C     ;hStdOut DWORD ?
 00000091 00		      C     QtPl	BYTE ?
 000001F3		      C .code
 000001F3		      C MouseDemo PROC
			      C 
			      C 	     	
			      C     INVOKE  GetConsoleWindow
 000001F8  A3 0000008D R      C     mov     hwndConsole,eax
 000001FD  E8 FFFFFE28	      C     call PAGE2
 00000202		      C      looop:
			      C          mGotoxy 0,0
 00000202  52		     1C 	push edx
 00000203  B6 00	     1C     mov  dh,0
 00000205  B2 00	     1C     mov  dl,0
 00000207  E8 00000000 E     1C 	call Gotoxy
 0000020C  5A		     1C 	pop  edx
			      C      
			      C          INVOKE GetCursorPos, ADDR cursorPos         
			      C          invoke ScreenToClient, hwndConsole, ADDR cursorPos
			      C          invoke Sleep, 20
			      C          .IF ( cursorPos.X>244 && cursorPos.X<380 ) && (cursorPos.Y>115 && cursorPos.Y<157)
			      C 	         INVOKE  GetKeyState,VK_LBUTTON
			      C 	         .iF ah
 00000266  C6 05 00000091 R   C 	             mov QtPl,1
	   01
 0000026D  B8 0000000F	      C 	             mov eax,0Fh
 00000272  E8 00000000 E      C 		     call settextcolor
 00000277  C3		      C 	             ret
			      C 	         .ENDIF
			      C         .ENDIF
			      C          .IF ( cursorPos.X>266 && cursorPos.X<357 ) && (cursorPos.Y>198 && cursorPos.Y<245)
			      C          	INVOKE  GetKeyState,VK_LBUTTON
			      C         .iF ah
 000002B3  C6 05 00000091 R   C             mov QtPl,2
	   02
 000002BA  B8 0000000F	      C             mov eax,0Fh
 000002BF  E8 00000000 E      C 	    call settextcolor
 000002C4  C3		      C             ret
			      C         .ENDIF
			      C         .ENDIF
			      C               
 000002C5  E9 FFFFFF38	      C      jmp looop
			      C 
 000002CA  C3		      C 	ret
 000002CB		      C MouseDemo ENDP
			      C 
			      C 
			      C 
			      C 
 00000092		      C .data
 00000092  000001F4 [	      C buffer BYTE 500 DUP(?)
	    00
	   ]
 00000286 = 000001F4	      C bufSize = ($-buffer)
			      C 
 00000286 43 61 6E 6E 6F      C errMsg BYTE "Cannot open file",0dh,0ah,0
	   74 20 6F 70 65
	   6E 20 66 69 6C
	   65 0D 0A 00
 00000299 46 69 6C 65 64      C filename     BYTE "Filedata.txt",0
	   61 74 61 2E 74
	   78 74 00
 000002A6 00000000	      C fileHandle   DWORD ?	; handle to output file
 000002AA 00000000	      C byteCount    DWORD ?    	; number of bytes written
			      C 
 000002CB		      C .code
 000002CB		      C file1 PROC
 000002CB  B8 00000400	      C mov eax,400h
 000002D0  BA 00000000	      C 	mov edx,0
 000002D5  BB 00000001	      C 	mov ebx,1
			      C 	.REPEAT
 000002DA  50		      C 	push eax
 000002DB  B8 0000000A	      C 	mov eax,0Ah
 000002E0  E8 00000000 E      C 	call SetTextColor
 000002E5  58		      C 	pop eax
 000002E6  B6 01	      C 	mov dh,1				;For Upper wall 'ah'
 000002E8  8A D4	      C 	mov dl,ah	
 000002EA  E8 00000000 E      C 	call gotoxy
 000002EF  B0 04	      C 	mov al,4
 000002F1  E8 00000000 E      C 	call writechar
 000002F6  B6 16	      C 	mov dh,22
 000002F8  E8 00000000 E      C 	call gotoxy
 000002FD  E8 00000000 E      C 	call writechar
 00000302  FE C4	      C 	inc ah
			      C 	.IF ah>31 && ah< 48
 0000030E  B6 03	      C 	mov dh,3				;For Upper wall 'ah'
 00000310  8A D4	      C 	mov dl,ah	
 00000312  E8 00000000 E      C 	call gotoxy
 00000317  B0 3D	      C 	mov al,'='
 00000319  E8 00000000 E      C 	call writechar	
			      C 	.ENDIF
			      C 	;push eax
			      C 	;INVOKE Sleep,3
			      C 	;pop eax
			      C 	.UNTIL ah==75
 00000323  BA 00000000	      C mov edx,0
 00000328  E8 00000000 E      C call gotoxy
			      C ;-------------------------------------------------------------------------------------------------------
			      C 	INVOKE CreateFile,
			      C 	  ADDR filename, GENERIC_READ, DO_NOT_SHARE, NULL,
			      C 	  OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, 0
			      C 
 00000349  A3 000002A6 R      C 	mov fileHandle,eax		; save file handle
			      C 	.IF eax == INVALID_HANDLE_VALUE
 00000353  BA 00000286 R      C 	  mov  edx,OFFSET errMsg		; Display error message
 00000358  E8 00000000 E      C 	  call WriteString
 0000035D  E9 000000DC	      C 	  jmp  QuitNow
			      C 	.ENDIF
			      C 
			      C 	INVOKE ReadFile,		; write text to file
			      C 	    fileHandle,		; file handle
			      C 	    ADDR buffer,		; buffer pointer
			      C 	    bufSize,		; number of bytes to write
			      C 	    ADDR byteCount,		; number of bytes written
			      C 	    0		; overlapped execution flag
			      C 
			      C 	INVOKE CloseHandle, fileHandle
 00000389  8B 35 000002AA R   C 	mov esi,byteCount
 0000038F  C6 86 00000092 R   C 	mov buffer[esi],0		; into buffer
	   00
 00000396  BE 00000000	      C 	mov esi,0		; insert null terminator
 0000039B  8B 0D 000002AA R   C 	mov ecx,byteCount
 000003A1		      C 	L1:
 000003A1  51		      C 	push ecx
			      C 	.IF esi>35 && esi<52		
 000003AC  B8 0000000F	      C 		mov eax,0Fh			;For Line
			      C 	.ELSEIF esi>53 && esi<75 || esi> 93 && esi<116 || esi>139 && esi<164
 000003D7  B8 0000000E	      C 		mov eax,0Eh			;Headings Color
			      C 	.ELSEIF esi>79 && esi<93 || esi>116 && esi<139
 000003F5  B8 0000000B	      C 		mov eax,0Bh			;Paragraph Color
 000003FA  50		      C 		push eax
			      C 		INVOKE Sleep,3
 00000402  58		      C 		pop eax
			      C 	.ELSEIF esi>164
 0000040D  B8 0000000D	      C 		mov eax,0Dh			;Group Members
 00000412  50		      C 		push eax
			      C 		
			      C 		INVOKE Sleep,3
 0000041A  58		      C 		pop eax
			      C 	.ELSE
 0000041D  B8 0000000A	      C 		mov eax,0Ah			;Between Line
			      C 	.ENDIF
 00000422  E8 00000000 E      C 	call SetTextColor
 00000427  8A 86 00000092 R   C 	mov al,buffer[esi]
 0000042D  E8 00000000 E      C 	call WriteChar
 00000432  46		      C 	INC esi
 00000433  59		      C 	pop ecx
 00000434  49		      C 	DEC ecx
 00000435  83 F9 00	      C 	CMP ecx,0
 00000438  0F 85 FFFFFF63     C 	JNZ L1
			      C 
 0000043E		      C QuitNow:
 0000043E  B6 17	      C mov dh,23
 00000440  B2 1E	      C mov dl,30
 00000442  E8 00000000 E      C call gotoxy
 00000447  C3		      C 	ret
 00000448		      C file1 ENDP
			      C 
			      C 
			      C 
			      C 
			      C ;main PROC
			      C 
			      C ;	exit
			      C ;main ENDP
			      C 
			      C 
			      C ;END main
			      C 
				Include Load.asm
 000002AE		      C .data
 00000448		      C .code
 00000448		      C Load1 PROC
			      C 
 00000448  B6 08	      C 	mov dh,8
 0000044A  B2 19	      C 	mov dl,25
 0000044C  E8 00000000 E      C 	call gotoxy
 00000451  B8 0000000A	      C 	mov eax,0Ah
 00000456  E8 00000000 E      C 	call SetTextColor
			      C 	mWrite"LOADING...!!!"
 000002AE		     1C 	.data				
 000002AE 4C 4F 41 44 49     1C 	??0009 BYTE "LOADING...!!!",0		
	   4E 47 2E 2E 2E
	   21 21 21 00
 0000045B		     1C 	.code
 0000045B  52		     1C 	push edx
 0000045C  BA 000002AE R     1C 	mov  edx,OFFSET ??0009
 00000461  E8 00000000 E     1C 	call Writestring
 00000466  5A		     1C 	pop  edx
 00000467  B8 0000000E	      C 	mov eax,0Eh
 0000046C  E8 00000000 E      C 	call SetTextColor
 00000471  B2 19	      C 	mov dl,25
 00000473  B9 0000001E	      C 	mov ecx,30
 00000478  B0 2D	      C 	mov al,'-'
 0000047A		      C 	L:
 0000047A  B6 0A	      C 		mov dh,10
 0000047C  E8 00000000 E      C 		call gotoxy
 00000481  E8 00000000 E      C 		call writechar
 00000486  B6 0C	      C 		mov dh,12
 00000488  E8 00000000 E      C 		call gotoxy
 0000048D  E8 00000000 E      C 		call writechar
 00000492  FE C2	      C 		inc dl
 00000494  E2 E4	      C 	LOOP L
 00000496  B8 0000000D	      C 	mov eax,0Dh
 0000049B  E8 00000000 E      C 	call SetTextColor
 000004A0  B9 0000001E	      C 	mov ecx,30
 000004A5  B2 19	      C 	mov dl,25
 000004A7  B0 B2	      C 	mov al,178
 000004A9		      C 	L1:
 000004A9  B0 B2	      C 		mov al,178
 000004AB  B6 0B	      C 		mov dh,11
 000004AD  E8 00000000 E      C 		call gotoxy
 000004B2  E8 00000000 E      C 		call writechar
 000004B7  52		      C 		push edx
 000004B8  51		      C 		push ecx
			      C 		INVOKE Sleep,150
 000004C3  59		      C 		pop ecx
 000004C4  5A		      C 		pop edx
 000004C5  FE C2	      C 	INC dl
 000004C7  E2 E0	      C 	LOOP L1
			      C 	
 000004C9  BA 00001600	      C 	mov edx,1600h
 000004CE  E8 00000000 E      C 	call gotoxy
 000004D3  C3		      C ret
 000004D4		      C Load1 ENDP
			      C 

 = 00000026			VK_UP		EQU		000000026h

				GetKeyState PROTO, nVirtKey:DWORD

 000002BC			.data
					;when user enter fot play again then all data will be initialized 
					
 000002BC 46 4C 41 50 50		titleStr   BYTE "FLAPPY BALL",0
	   59 20 42 41 4C
	   4C 00
					
 000002C8 00000000 00			cursorInfo CONSOLE_CURSOR_INFO <>
					
 000002CD 0A				col BYTE 10
						
 000002CE 06			    	row BYTE 6
				    	
 000002CF 06				SPACE BYTE 6				;Space in Hurdles
					
 000002D0 19 32 4B			SET BYTE 25,50,75			;Position of Walls 
					
 000002D3 1A 33 4C			CLEAROLS BYTE 26,51,76			;Position to clear wall
					
 000002D6 08 05 03			HURD BYTE 8,5,3			;Position in wall where space is created 
					
 000002D9 00				SCORE BYTE 0
					
 000002DA 00				LEVEL BYTE 0
					
				;------------------------------------------------------------------------------------------------------
 000004D4			.code
				;Procedure to initialize values
 000004D4			SetVal PROC
 000004D4  BE 00000000			mov esi,0
 000004D9  B0 19			mov al,25
 000004DB  B9 00000003			mov ecx,3
 000004E0				LL1:
 000004E0  88 86 000002D0 R			mov SET[esi],al
 000004E6  FE C0				inc al
 000004E8  88 86 000002D3 R			mov CLEAROLS[esi],al
 000004EE  FE C8				dec al
 000004F0  04 19				add al,25
 000004F2  46					inc esi
 000004F3  50					push eax
 000004F4  B8 00000006				mov eax,6			;To create Random value for hurdle
 000004F9  E8 00000000 E			call	RandomRange
 000004FE  83 C0 02				add eax,2
 00000501  88 86 000002D6 R			mov HURD[esi],al
 00000507  58					pop eax
 00000508  E2 D6			LOOP LL1
 0000050A  C3			ret
 0000050B			SetVal ENDP

				;Procedure to print hurdles for Flappy Bird
 0000050B			Print PROC
 0000050B  E8 00000000 E	call	Randomize
 00000510  BE 00000000		mov esi,0
				;for outer loop
					.WHILE esi<3				;outer loop
 00000517  B6 01			mov dh,1				;set Y_AXIS
						.WHILE dh < 19 			;Inner Loop
							.IF dh == HURD[esi]	
 00000523  02 35 000002CF R				add dh,SPACE		;Space in Hurdles
							.ENDIF
 00000529  8A 96 000002D0 R			mov dl,SET[esi]			;Set X_AXIS
 0000052F  E8 00000000 E			call	GOTOXY			;Set curser on given location
 00000534  52					push edx			;To save Y_AXIS
 00000535  B8 0000004A				mov eax,4Ah
 0000053A  E8 00000000 E			call SetTextColor		;set background && Text color
						
 0000053F  B0 78				mov al,"x"			;Print Wall
 00000541  E8 00000000 E			call writechar
 00000546  5A					pop edx
 00000547  FE C6				INC dh				;Increment in Y_AXIS
						.ENDW
					.IF SET[esi]<=0
 00000557  B8 00000006				mov eax,6			;To create Random value for hurdle
 0000055C  E8 00000000 E			call	RandomRange
 00000561  83 C0 02				add eax,2
 00000564  88 86 000002D6 R			mov HURD[esi],al
 0000056A  C6 86 000002D0 R			mov SET[esi],75			;Set new hurdle
	   4B
 00000571  FE 05 000002D9 R			INC SCORE			;Increament in Score
						.ENDIF
 00000577  FE 8E 000002D0 R		DEC SET[esi]
 0000057D  46				INC esi
					.ENDW
 00000583  C3			ret
 00000584			Print ENDP

				;-------------------------------------------------------------------------------------------------------

				;Procedure to clear hurdles for Flappy Bird
 00000584			ClearOld PROC					
 00000584  BE 00000000		mov esi,0					;for outer loop
					.WHILE esi < 3				;outer loop
 0000058B  B6 01			mov dh,1				;set Y_AXIS
						.WHILE dh < 19 			;Inner Loop
						
 0000058F  8A 96 000002D3 R			mov dl,CLEAROLS[esi]			;Set X_AXIS
 00000595  E8 00000000 E			call	GOTOXY			;Set curser on given location
 0000059A  50					push eax			;To save Y_AXIS
						
 0000059B  B8 0000000F				mov eax,0fh
 000005A0  E8 00000000 E			call SetTextColor		;clear background
						
 000005A5  B0 20				mov al, ' '			;Clear Wall
 000005A7  E8 00000000 E			call WriteChar

 000005AC  58					pop eax
 000005AD  FE C6				INC dh				;Increment in Y_AXIS
						.ENDW
					.IF CLEAROLS[esi]<=0
 000005BD  C6 86 000002D3 R			mov CLEAROLS[esi],75			;Set new position for hurdle
	   4B
						.ENDIF
 000005C4  FE 8E 000002D3 R		DEC CLEAROLS[esi]
 000005CA  46				INC esi
					.ENDW
 000005D0  C3			ret
 000005D1			ClearOld ENDP

				;---------------------------------------------------------------------------------------------

 000005D1			main PROC

				INVOKE SetConsoleTitle, ADDR titleStr

 000005DB  E8 FFFFFCEB		call file1
 000005E0  E8 00000000 E	call waitmsg

 000005E5			NewGame:
 000005E5  E8 00000000 E	call Clrscr
 000005EA  E8 FFFFFC04		call MouseDemo
 000005EF  E8 00000000 E	call Clrscr
				.if QtPl==1 
 000005FD  E8 FFFFFE46			call Load1
 00000602  E8 00000000 E		call Clrscr
				.endif
				.if QtPl==2 
 00000610  E9 0000028C			JMP Quet
				.endif
 00000615  C6 05 000002CC R	mov cursorInfo.bVisible,0
	   00
 0000061C  C7 05 000002C8 R	mov cursorInfo.dwSize,100
	   00000064
				INVOKE SetConsoleCursorInfo, hwndConsole,
				 ADDR cursorInfo
 00000636  B6 13		mov dh,19
 00000638  B2 00		mov dl,0
					.WHILE dl < 80
 0000063C  B8 0000000D			mov eax,0Dh
 00000641  E8 00000000 E		call SetTextColor		;clear background
 00000646  B6 00			mov dh,0
 00000648  E8 00000000 E		call	gotoxy
 0000064D  B0 1F			mov al,31
 0000064F  E8 00000000 E		call writechar
 00000654  B6 13			mov dh,19
 00000656  E8 00000000 E		call	gotoxy
 0000065B  B0 1E			mov al,30
 0000065D  E8 00000000 E		call writechar
 00000662  FE C2			INC dl
					.ENDW
					
 00000669  C6 05 000002CD R		mov col,10
	   0A
 00000670  C6 05 000002CE R		mov row,6
	   06
 00000677  C6 05 000002CF R		mov SPACE,10
	   0A
 0000067E  C6 05 000002D9 R		mov SCORE,0
	   00
 00000685  C6 05 000002DA R		mov LEVEL,0
	   00
					.if SCORE!=0
					mwrite"Score is not zero"
 000002DB		     1		.data				
 000002DB 53 63 6F 72 65     1		??000A BYTE "Score is not zero",0		
	   20 69 73 20 6E
	   6F 74 20 7A 65
	   72 6F 00
 00000695		     1		.code
 00000695  52		     1		push edx
 00000696  BA 000002DB R     1		mov  edx,OFFSET ??000A
 0000069B  E8 00000000 E     1		call Writestring
 000006A0  5A		     1		pop  edx
 000006A1  E9 000001FB			JMP Quet
					.endif
					
 000006A6				L:
						
 000006A6  E8 FFFFFE60				call	Print
 000006AB  E8 FFFFFED4				call	ClearOld

						;Check the status of key down or on
 000006B0  B4 00				mov ah,0
						INVOKE GetKeyState, VK_UP
						.IF ah && row > 1
 000006C6  80 2D 000002CE R				sub row,2
	   02
						.ENDIF 

 000006CD  8A 15 000002CD R			mov  dl, col        ; column
 000006D3  8A 35 000002CE R			mov  dh, row        ; row
 000006D9  B8 00000009				mov eax,09h
 000006DE  E8 00000000 E			call SetTextColor		;clear background
 000006E3  E8 00000000 E			call Gotoxy         ; Change position according to new input
							        
 000006E8  B0 4F				mov  al, 'O'          
 000006EA  E8 00000000 E	        	call WriteChar      ; Write point on new place
					
						;Checking Position of Ball
						.IF (row <=1 || row >=18)
 00000701  E9 00000155					JMP Again
						.ENDIF
 00000706  BE 00000000				mov esi,0
						.REPEAT
 0000070B  8A 86 000002D6 R				mov al,HURD[esi]
 00000711  8A 25 000002CD R				mov ah,col
							.IF (SET[esi]== ah && (row>1 && row<=al))
 00000730  E9 00000126						JMP Again
							.ENDIF
 00000735  02 05 000002CF R				add al,SPACE
 0000073B  FE C8					DEC al
 0000073D  FE C8					DEC al
							.IF (SET[esi]== ah&&row>al&&row<19)
 00000758  E9 000000FE						JMP Again
							.ENDIF
 0000075D  46						INC esi
						.UNTIL esi==3
									;Check for Spaces and Speed
						.IF SCORE>10 && SCORE<25
							invoke Sleep, 75
 0000077C  C6 05 000002DA R				mov LEVEL,1
	   01
 00000783  C6 05 000002CF R				mov SPACE,9
	   09
						.ELSEIF SCORE>=25 && SCORE<45
							invoke Sleep, 50
 000007A5  C6 05 000002DA R				mov LEVEL,2
	   02
 000007AC  C6 05 000002CF R				mov SPACE,8
	   08
						.ELSEIF SCORE>45
							invoke Sleep, 30
 000007C5  C6 05 000002DA R				mov LEVEL,3
	   03
 000007CC  C6 05 000002CF R				mov SPACE,7
	   07
						.ELSE
							invoke Sleep, 100
						.ENDIF
								    
						    
						    ; Erase Point
 000007DC  8A 15 000002CD R			    mov  dl, col        ; column
 000007E2  8A 35 000002CE R			    mov  dh, row        ; row
 000007E8  E8 00000000 E			    call Gotoxy         ; Change position according to new input
						    
 000007ED  B0 20				    mov  al,' '     
 000007EF  E8 00000000 E			    call WriteChar      ; Remove previous data
					
 000007F4  FE 05 000002CE R		INC row
					
									;Showing of score at particular point
 000007FA  B6 14			mov dh,20
 000007FC  B2 41			mov dl,65
 000007FE  E8 00000000 E		call gotoxy
 00000803  B8 0000000E			mov eax,0Eh
 00000808  E8 00000000 E		call SetTextColor		;clear background
					mWrite "SCORE : "
 000002ED		     1		.data				
 000002ED 53 43 4F 52 45     1		??000B BYTE "SCORE : ",0		
	   20 3A 20 00
 0000080D		     1		.code
 0000080D  52		     1		push edx
 0000080E  BA 000002ED R     1		mov  edx,OFFSET ??000B
 00000813  E8 00000000 E     1		call Writestring
 00000818  5A		     1		pop  edx
 00000819  B8 00000000			mov eax,0
 0000081E  A0 000002D9 R		mov al,SCORE
 00000823  E8 00000000 E		call Writedec
					
 00000828  B6 14			mov dh,20
 0000082A  B2 05			mov dl,5
 0000082C  E8 00000000 E		call gotoxy
 00000831  B8 00000007			mov eax,07h
 00000836  E8 00000000 E		call SetTextColor		;clear background
					mWrite "LEVEL : "
 000002F6		     1		.data				
 000002F6 4C 45 56 45 4C     1		??000C BYTE "LEVEL : ",0		
	   20 3A 20 00
 0000083B		     1		.code
 0000083B  52		     1		push edx
 0000083C  BA 000002F6 R     1		mov  edx,OFFSET ??000C
 00000841  E8 00000000 E     1		call Writestring
 00000846  5A		     1		pop  edx
 00000847  B8 00000000			mov eax,0
 0000084C  A0 000002DA R		mov al,LEVEL
 00000851  E8 00000000 E		call Writedec
							
 00000856  E9 FFFFFE4B			JMP L						;End of Game Loop
					
 0000085B				Again:
 0000085B  B6 0F				mov dh,15
 0000085D  B2 1E				mov dl,30
 0000085F  E8 00000000 E			call gotoxy
 00000864  B8 0000000A				mov eax,0Ah
 00000869  E8 00000000 E			call SetTextColor		;clear background
						mWrite"Game Over...!!!"
 000002FF		     1		.data				
 000002FF 47 61 6D 65 20     1		??000D BYTE "Game Over...!!!",0		
	   4F 76 65 72 2E
	   2E 2E 21 21 21
	   00
 0000086E		     1		.code
 0000086E  52		     1		push edx
 0000086F  BA 000002FF R     1		mov  edx,OFFSET ??000D
 00000874  E8 00000000 E     1		call Writestring
 00000879  5A		     1		pop  edx
						;INVOKE Sleep,3000
 0000087A  B6 15				mov dh,21
 0000087C  B2 19				mov dl,25
 0000087E  E8 00000000 E			call gotoxy
 00000883  B8 0000000A				mov eax,0Ah
 00000888  E8 00000000 E			call SetTextColor
 0000088D  E8 00000000 E			call waitmsg
 00000892  E8 00000000 E			call Randomize			;Again set values for new game
 00000897  E8 FFFFFC38				call SetVal
 0000089C  E9 FFFFFD44			JMP NewGame
 000008A1			Quet:	
 000008A1  B6 0E		mov dh,14
 000008A3  B2 14		mov dl,20
 000008A5  E8 00000000 E	call gotoxy
				exit
 000008B1			main ENDP
				END main
Microsoft (R) Macro Assembler Version 6.15.8803		    12/17/15 22:29:53
Flappy Bird Game					     Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
NewLine  . . . . . . . . . . . .	Proc
ShowFlag . . . . . . . . . . . .	Proc
ShowRegister . . . . . . . . . .	Proc
Startup  . . . . . . . . . . . .	Proc
WriteSpace . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mNewLine . . . . . . . . . . . .	Proc
mReadStr . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteStr  . . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000005
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 Byte
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPos  . . . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  maxWinSize . . . . . . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
MSGStruct  . . . . . . . . . . .	 0000001C
  msgWnd . . . . . . . . . . . .	 00000000	 DWord
  msgMessage . . . . . . . . . .	 00000004	 DWord
  msgWparam  . . . . . . . . . .	 00000008	 DWord
  msgLparam  . . . . . . . . . .	 0000000C	 DWord
  msgTime  . . . . . . . . . . .	 00000010	 DWord
  msgPt  . . . . . . . . . . . .	 00000014	 QWord
POINT  . . . . . . . . . . . . .	 00000008
  X  . . . . . . . . . . . . . .	 00000000	 DWord
  Y  . . . . . . . . . . . . . .	 00000004	 DWord
RECT . . . . . . . . . . . . . .	 00000010
  left . . . . . . . . . . . . .	 00000000	 DWord
  top  . . . . . . . . . . . . .	 00000004	 DWord
  right  . . . . . . . . . . . .	 00000008	 DWord
  bottom . . . . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WNDCLASS . . . . . . . . . . . .	 00000028
  style  . . . . . . . . . . . .	 00000000	 DWord
  lpfnWndProc  . . . . . . . . .	 00000004	 DWord
  cbClsExtra . . . . . . . . . .	 00000008	 DWord
  cbWndExtra . . . . . . . . . .	 0000000C	 DWord
  hInstance  . . . . . . . . . .	 00000010	 DWord
  hIcon  . . . . . . . . . . . .	 00000014	 DWord
  hCursor  . . . . . . . . . . .	 00000018	 DWord
  hbrBackground  . . . . . . . .	 0000001C	 DWord
  lpszMenuName . . . . . . . . .	 00000020	 DWord
  lpszClassName  . . . . . . . .	 00000024	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000030F DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000008B1 DWord	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

BILAL  . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000002A Public STDCALL
  x  . . . . . . . . . . . . . .	Word	 bp + 00000008
  y  . . . . . . . . . . . . . .	Word	 bp + 0000000C
  xyPos  . . . . . . . . . . . .	DWord	 bp - 00000004
ClearOld . . . . . . . . . . . .	P Near	 00000584 _TEXT	Length= 0000004D Public STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ClrScr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateWindowExA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DefWindowProcA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DispatchMessageA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleWindow . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCursorPos . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMessageA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetModuleHandleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetWindowDC  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetWindowRect  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Load1  . . . . . . . . . . . . .	P Near	 00000448 _TEXT	Length= 0000008C Public STDCALL
  L  . . . . . . . . . . . . . .	L Near	 0000047A _TEXT	
  L1 . . . . . . . . . . . . . .	L Near	 000004A9 _TEXT	
LoadCursorA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LoadIconA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MouseDemo  . . . . . . . . . . .	P Near	 000001F3 _TEXT	Length= 000000D8 Public STDCALL
  looop  . . . . . . . . . . . .	L Near	 00000202 _TEXT	
PAGE2  . . . . . . . . . . . . .	P Near	 0000002A _TEXT	Length= 000001C9 Public STDCALL
  l1 . . . . . . . . . . . . . .	L Near	 0000003D _TEXT	
  l2 . . . . . . . . . . . . . .	L Near	 00000061 _TEXT	
  l3 . . . . . . . . . . . . . .	L Near	 00000085 _TEXT	
  l4 . . . . . . . . . . . . . .	L Near	 000000A9 _TEXT	
  L  . . . . . . . . . . . . . .	L Near	 00000176 _TEXT	
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PostQuitMessage  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Print  . . . . . . . . . . . . .	P Near	 0000050B _TEXT	Length= 00000079 Public STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RegisterClassA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ScreenToClient . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetVal . . . . . . . . . . . . .	P Near	 000004D4 _TEXT	Length= 00000037 Public STDCALL
  LL1  . . . . . . . . . . . . .	L Near	 000004E0 _TEXT	
ShowWindow . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
UpdateWindow . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
file1  . . . . . . . . . . . . .	P Near	 000002CB _TEXT	Length= 0000017D Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000003A1 _TEXT	
  QuitNow  . . . . . . . . . . .	L Near	 0000043E _TEXT	
main . . . . . . . . . . . . . .	P Near	 000005D1 _TEXT	Length= 000002E0 Public STDCALL
  NewGame  . . . . . . . . . . .	L Near	 000005E5 _TEXT	
  L  . . . . . . . . . . . . . .	L Near	 000006A6 _TEXT	
  Again  . . . . . . . . . . . .	L Near	 0000085B _TEXT	
  Quet . . . . . . . . . . . . .	L Near	 000008A1 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

??0000 . . . . . . . . . . . . .	Byte	 00000000 _DATA	
??0001 . . . . . . . . . . . . .	Byte	 00000017 _DATA	
??0002 . . . . . . . . . . . . .	Byte	 0000002A _DATA	
??0003 . . . . . . . . . . . . .	Byte	 0000003D _DATA	
??0004 . . . . . . . . . . . . .	Byte	 00000050 _DATA	
??0005 . . . . . . . . . . . . .	Byte	 0000005D _DATA	
??0006 . . . . . . . . . . . . .	Byte	 0000006A _DATA	
??0007 . . . . . . . . . . . . .	Byte	 00000077 _DATA	
??0008 . . . . . . . . . . . . .	Byte	 0000007E _DATA	
??0009 . . . . . . . . . . . . .	Byte	 000002AE _DATA	
??000A . . . . . . . . . . . . .	Byte	 000002DB _DATA	
??000B . . . . . . . . . . . . .	Byte	 000002ED _DATA	
??000C . . . . . . . . . . . . .	Byte	 000002F6 _DATA	
??000D . . . . . . . . . . . . .	Byte	 000002FF _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
CLEAROLS . . . . . . . . . . . .	Byte	 000002D3 _DATA	
COLOR_BACKGROUND . . . . . . . .	Number	 00000002h   
COLOR_WINDOW . . . . . . . . . .	Number	 00000005h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CW_USEDEFAULT  . . . . . . . . .	Number	 -80000000h   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
CreateWindowEx . . . . . . . . .	Text   	 CreateWindowExA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
DefWindowProc  . . . . . . . . .	Text   	 DefWindowProcA
DispatchMessage  . . . . . . . .	Text   	 DispatchMessageA
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetMessage . . . . . . . . . . .	Text   	 GetMessageA
GetModuleHandle  . . . . . . . .	Text   	 GetModuleHandleA
HURD . . . . . . . . . . . . . .	Byte	 000002D6 _DATA	
IDC_ARROW  . . . . . . . . . . .	Number	 00007F00h   
IDI_APPLICATION  . . . . . . . .	Number	 00007F00h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
LEVEL  . . . . . . . . . . . . .	Byte	 000002DA _DATA	
LoadCursor . . . . . . . . . . .	Text   	 LoadCursorA
LoadIcon . . . . . . . . . . . .	Text   	 LoadIconA
MAIN_WINDOW_STYLE  . . . . . . .	Number	 118F0000h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
QtPl . . . . . . . . . . . . . .	Byte	 00000091 _DATA	
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
RegisterClass  . . . . . . . . .	Text   	 RegisterClassA
SCORE  . . . . . . . . . . . . .	Byte	 000002D9 _DATA	
SET  . . . . . . . . . . . . . .	Byte	 000002D0 _DATA	
SPACE  . . . . . . . . . . . . .	Byte	 000002CF _DATA	
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SW_SHOW  . . . . . . . . . . . .	Number	 00000005h   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WM_CLOSE . . . . . . . . . . . .	Number	 00000010h   
WM_CREATE  . . . . . . . . . . .	Number	 00000001h   
WM_LBUTTONDOWN . . . . . . . . .	Number	 00000201h   
WS_BORDER  . . . . . . . . . . .	Number	 00800000h   
WS_CAPTION . . . . . . . . . . .	Number	 00C00000h   
WS_DLGFRAME  . . . . . . . . . .	Number	 00400000h   
WS_MAXIMIZEBOX . . . . . . . . .	Number	 00010000h   
WS_MINIMIZEBOX . . . . . . . . .	Number	 00020000h   
WS_OVERLAPPED  . . . . . . . . .	Number	 00000000h   
WS_SYSMENU . . . . . . . . . . .	Number	 00080000h   
WS_THICKFRAME  . . . . . . . . .	Number	 00040000h   
WS_VISIBLE . . . . . . . . . . .	Number	 10000000h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
bufSize  . . . . . . . . . . . .	Number	 000001F4h   
buffer . . . . . . . . . . . . .	Byte	 00000092 _DATA	
byteCount  . . . . . . . . . . .	DWord	 000002AA _DATA	
col  . . . . . . . . . . . . . .	Byte	 000002CD _DATA	
cursorInfo . . . . . . . . . . .	CONSOLE_CURSOR_INFO  000002C8 _DATA	
cursorPos  . . . . . . . . . . .	POINT	 00000085 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
errMsg . . . . . . . . . . . . .	Byte	 00000286 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fileHandle . . . . . . . . . . .	DWord	 000002A6 _DATA	
filename . . . . . . . . . . . .	Byte	 00000299 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
hwndConsole  . . . . . . . . . .	DWord	 0000008D _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
red  . . . . . . . . . . . . . .	Number	 00000004h   
row  . . . . . . . . . . . . . .	Byte	 000002CE _DATA	
titleStr . . . . . . . . . . . .	Byte	 000002BC _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
